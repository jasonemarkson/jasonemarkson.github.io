---
layout: post
title:      "Rails Project"
date:       2021-02-15 03:30:33 +0000
permalink:  rails_project
---


Compared to the Sinatra project, I definitely felt the heat turn up with the Rails module. There were a lot of moving parts about this project and it was certainly challenging. This module was similar to the Sinatra project because it continued to test my understanding of MVC, which I ultimately consider a strongsuit for me. However, this module was also great in the fact that it gave me a sense of how developers problem-solve and troubleshoot in the real world. I can't remember the last time I made so many Google searches as I have done in the span of this past week. One thing that this project reinforced for me was that it is impossible for one person to remember every single bit of code, the correct syntax, the name of different input types for forms, etc. Even if I did remember the correct syntax for some code, I would still find myself Googling to make sure that I was writing it correctly. I've learned how to effectively Google search without any of the fluff words that I used to include when I first started such as, "how to write..." or "what to do when...". 

Going into project week, I was behind again and still trying to catch up on the last lessons of the section. Ultimately, I wasn't feeling too hot that I was confident in every single piece of Rails material that I had read about and completed labs for. The hardest parts about Rails for me were nested forms and OAuth. For nested forms, I understood the main idea behind them and that they are advantagous and convienient for users. However, I struggled with how to implement them in my project and often confused them for other lessons covered in the section. It was a real *a-ha* moment for me today when it all clicked. My approach for adding a review to a specific recipe was to add a form_for within the Recipe show page and have a user submit it through there. My struggle was with how the user would submit the review to the Recipe reviews array. After many Google searches and reaching out for help, I referred to the "Modifying Nested Resources" lesson and was blown away by just how simple this all was. All I needed to do was define a new instance of review with the recipe_id that was passed in from params and it would be pre-set once the review was created. It is something I will now not forget.

Learning how to use OAuth for the first-time truly "hands-on" was also a learning curve. After doing it once on my own, I now know a little bit better what to look out for and how to add any third-party signons to log into my app going forward. This is an incredibly useful tool and it's something that we have all used when we don't feel like creating another account for a website. I spent the most time troubleshooting and trying to figure out why I was getting different error messages after I added the gems, created the .env file, added the client id/client secret and created the omniauth.rb file in config/initializers folder. I thought I did everything right and was still getting a **OmniAuth::AuthenticityError - Forbidden error**. After yet another Google search, I figured out that I needed to bundle another gem called "omniauth-rails_csrf_protection" to provide forgery protection. Again, another easy fix!

There were many other challenges along the way for the project but just like before, I came out on the other side knowing much more than I did when I began. I'm thankful to finally be done with this module and I'm happy for the hard work I put in. It's been the most challenging one yet but the most rewarding too. 
